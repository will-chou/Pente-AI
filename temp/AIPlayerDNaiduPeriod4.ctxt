#BlueJ class context
comment0.params=id
comment0.target=AIPlayerDNaiduPeriod4(int)
comment1.params=idArray\ moveCount
comment1.target=pente.Location\ makeMove(int[][],\ int)
comment1.text=\r\n\ WEIGHTING\ SYSTEM\ OF\ COPY\ ARRAY\r\n\ If\ win\ possible\ \:\ 10000\r\n\ if\ stop\ win\ possible\ \:\ 9000\r\n\ if\ we\ got\ nothing\ \:\ spots\ ranked\ by\ closest\ to\ center\r\n
comment10.params=array\ row\ col
comment10.target=boolean\ isInBounds(int[][],\ int,\ int)
comment2.params=copy\ idArray
comment2.target=int\ findLargest(int[][],\ int[][])
comment3.params=me\ idArray\ row\ col
comment3.target=boolean\ capturePossible(boolean,\ int[][],\ int,\ int)
comment3.text=\r\n\ If\ "me"\ is\ true,\ then\ looking\ for\ capture.\ \ Otherwise,\ looking\ to\ protect\r\n
comment4.params=idArray
comment4.target=int[][]\ defaultCopy(int[][])
comment5.params=me\ idArray\ row\ col
comment5.target=int\ longestRow(boolean,\ int[][],\ int,\ int)
comment5.text=\r\n\ \r\n\ @param\ idArray\r\n\ @param\ row\r\n\ @param\ col\r\n\ @return\ the\ longest\ row\ that\ already\ exists\ (if\ it\ can\ be\ made\ into\ a\ 5\ in\ a\ row).\ \ 4\ is\ max\r\n
comment6.params=idArray\ row\ col\ change
comment6.target=int\ longestPossibility(int[][],\ int,\ int,\ int)
comment6.text=\r\n\ \r\n\ @param\ idArray\r\n\ @param\ row\r\n\ @param\ col\r\n\ @param\ change\ \:\ which\ direction\ to\ go\ in.\ in\ a\ grid\ \:\r\n\ 1\ 2\ 3\r\n\ 8\ *\ 4\r\n\ 7\ 6\ 5\r\n\ @return\ the\ longest\ row\ of\ your\ pieces\ that\ can\ be\ made\ sandwiched\ between\ 2\ enemy\ pieces\r\n
comment7.params=idArray\ row\ col
comment7.target=int\ longestChain(int[][],\ int,\ int)
comment8.params=num\ row2
comment8.target=int\ changeRow2(int,\ int)
comment9.params=num\ col2
comment9.target=int\ changeCol2(int,\ int)
numComments=11
